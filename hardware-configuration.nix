# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot = {
    # Bootloader
    loader ={
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
    };

    # Set the hardened kernel as your base kernel
    kernelPackages =
      pkgs.linuxKernel.packages.linux_6_15           #! testing
      # pkgs.linuxPackages_latest                    #* FOR LATEST pkgs.linuxPackages_latest
      ;

        #! DIY approach - takes so much time it's impossible to wait!
        # kernelPackages = pkgs.linuxPackagesFor (pkgs.linux_6_12.override {
        #   argsOverride = rec {
        #     version = "6.12.8";
        #     modDirVersion = "6.12.8";
        #       src = pkgs.fetchurl {
        #                   url = "mirror://kernel/linux/kernel/v6.x/linux-${version}.tar.xz";
        #                   sha256 = "sha256-IpHaBlygS3Fcie5QNirsPwIadBS8lj8bVnNmgsgSKXk=";
        #       };
        #     };
        #   }
        # );

    # Add the rtl8188eus-aircrack module to your kernel modules
    extraModulePackages = with config.boot.kernelPackages; [
      # rtl8188eus-aircrack
      # rtl8812au
      # rtl88xxau-aircrack    # see https://discourse.nixos.org/t/solved-how-to-correctly-add-kernel-module/24974/2

      rtw88

    ];





    # Configure initial ramdisk modules
    initrd = {
      availableKernelModules = [
        "nvme"
        "sd_mod"
        "ahci" "xhci_pci"
        "usbhid" "usb_storage"
      ];
      kernelModules = [
           "asus_wmi"
       ];
    };

    # Configure kernel modules
    kernelModules = [
      "amd_pstate" "kvm-amd"
      "asus_wmi"
      "thunderbolt" "usb4"

      "tun"

      "asus-armoury"

      "typec"              # USB-C subsystem
      "typec_mux"          # Mux control for alternate modes
      "typec_dp"           # DisplayPort over USB-C
      "usb_typec"          # General USB-C device handling
    ];

    # Blacklist specific kernel modules
    blacklistedKernelModules = [
    #! Camera drivers
    "mc"
    "uvcvideo"
    "videodev"
    "videobuf2_v4l2"
    "videobuf2_common"
    "videobuf2_vmalloc"

    #! AMDGPU drivers
    "amdgpu" "radeon"
    ];

    #> Kernel parameters configuration
    kernelParams = [
      "acpi_backlight=active" "acpi_osi=Linux"

      # "libata.force=noncq"  # Disable NCQ power management
      "ahci.mobile_lpm_policy=0"  # Disable AHCI Link Power Management

      # CPU optimizations
      "amd_iommu=on"
      "mitigations=on"
      "amd_pstate=guided"      # Enable AMD P-State driver
      # "processor.max_cstate=7"  # Limit C-states for better response time

      # Remove
      "nowatchdog"
      "intel_pstate=disable"

      # "preempt=full"           # Better for desktop/low-latency in 
      # "mce=ignore_ce"          # Ignore non-fatal Correctable Errors (reduces log noise)
      "scsi_mod.use_blk_mq=1"  # Use multi-queue for faster I/O

      # Memory security parameters
      "slab_nomerge"            # Disables merging of slabs of similar sizes
      "vsyscall=none"           # Disables legacy system call interface
      "slub_debug=FZP"          # Enables sanity checks (F), redzoning (Z) and poisoning (P).
      "init_on_free=1"          # Fill freed pages and heap objects with zeroes
      "init_on_alloc=1"         # to initialize memory on allocation (complements init_on_free=1).
      "page_alloc.shuffle=1"    # Helps detect memory issues earlier + Major security gain

      # New memory management parameters
      "hugepagesz=2M"                # Enable 2MB huge pages
      "hugepages=2048"               # Reserve 4GB for huge pages (2048 * 2MB)
      "default_hugepagesz=2M"        # Set default huge page size
      "transparent_hugepage=madvise" # Enable transparent huge pages

      "pti=on"                      # Page Table Isolation for security
      # "page_poison=1"             # Poison freed memory pages (As it conflicts with init_on_free)
      "randomize_kstack_offset=on"  # Enhanced kernel stack ASLR

    ];

    kernel.sysctl = {

    #! Swap related
    "vm.swappiness" = 10;  # Change this value as needed (0-100) 0 makes kernel avoid swap as much as possible

    #! Memory management
    "vm.dirty_ratio" = 10;                  # Full writeback at 10%
    "vm.page-cluster" = 3;                  # Default page clustering (test with 0 if needed)
    "vm.min_free_kbytes" = 65536;           # Reserve 64MB of free memory (adjust as needed)
    "vm.dirty_background_ratio" = 5;        # Background writeback at 5%
    "vm.compaction_proactiveness" = 0;      # Default memory compaction (change to 1 if fragmentation issues arise)

    # Memory security
    "vm.mmap_rnd_bits" = 32;                # Increase ASLR entropy
    "kernel.kptr_restrict" = 2;             # Hide kernel pointers
    "kernel.dmesg_restrict" = 1;            # Restrict dmesg access
    "vm.mmap_rnd_compat_bits" = 16;         # Compatible ASLR entropy

    # DDR5 and NUMA settings
    "vm.zone_reclaim_mode" = 0;             # Disable zone reclaim for NUMA
    "kernel.numa_balancing" = 0;            # Disable automatic NUMA balancing
    };


  };

  services.fstrim = {
    enable = true;
    interval = "weekly"; # Default is weekly, which is generally sufficient
  };


  fileSystems."/" =
    { device = "/dev/disk/by-uuid/df148324-a3b5-4dd3-a1f3-621da1a9db8f";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/3D8A-0E92";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };


  services.smartd = {
    enable = true;
    notifications = {
      # Enable email notifications (requires mail server setup)
      mail.enable = false;
      mail.recipient = "your-email@example.com";  # Replace with your email
    };
    defaults = {
      # Monitor all attributes, auto-enable monitoring, check every 30 minutes
      monitored = "-a -o on -S on -s (S/../.././02|L/../../7/03)";
      # Use default notification settings
    };
    devices = [
      # Main NVMe drive
      {
        device = "/dev/nvme0n1";
        options = "-d nvme";  # Changed to string
      }
      # External SATA drive
      # {
      #   device = "/dev/sda";
      #   options = "-n standby,15 -d sat";  # Combined options into single string
      # }
    ];
  };



  # Add zram-based swap since you have no swap configured
  zramSwap = {
    enable = true;
    algorithm = "zstd";
    priority = 10;
    memoryPercent = 50;  # Use up to 10% of RAM for zram swap
  };

  hardware.cpu = {
    amd = {
      updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

        sev = {
          enable = true;  # Enable AMD SEV (Secure Encrypted Virtualization)
        };
    };
  };

  services.acpid.enable= true;

  services.power-profiles-daemon.enable= true;

  # services.udev.extraRules = ''
  # ACTION=="add", SUBSYSTEM=="pci", DRIVER=="pcieport", ATTR{power/wakeup}="disabled"

  # # Disable XHC USB controllers from waking up the system
  # ACTION=="add", SUBSYSTEM=="pci", DRIVER=="xhci_hcd", ATTR{power/wakeup}="disabled"
  # ACTION=="add", SUBSYSTEM=="usb", ATTR{power/wakeup}="disabled"
  # '';

  #--> Better scheduling for better CPU cycles & audio performance
  services.system76-scheduler = {
    enable = true;
  };

  services.asusd= {
    enable = true;
    enableUserService = true;
  };

  hardware.bluetooth = {
  enable = true; # enables support for Bluetooth
  powerOnBoot = false; # powers up the default Bluetooth controller on boot
    settings = {
      General = {
        Enable = "Source,Sink,Media,Socket";
      };
    };
  };

  hardware.firmware= [
    pkgs.sof-firmware

  ];

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
